"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.2.7.
"""

import os
import logging
import logging.config
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Security and Debug Settings
SECRET_KEY = os.environ.get('SECRET_KEY', 'default-secret-key-for-development')
DEBUG = os.environ.get('DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # OpenTelemetry Instrumentation
    'opentelemetry.instrumentation.django',
    'opentelemetry.instrumentation.psycopg2',
    
    # Your apps
    'notes_app.apps.NotesAppConfig',
]

# Middleware Configuration
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Comprehensive Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'opentelemetry': {
            'format': 'OTEL: {levelname} - {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'opentelemetry': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'opentelemetry'
        }
    },
    'loggers': {
        # OpenTelemetry specific loggers
        'opentelemetry': {
            'handlers': ['console', 'opentelemetry'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'opentelemetry.instrumentation': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Database query logging
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        }
    }
}

# Configure logging
logging.config.dictConfig(LOGGING)

# OpenTelemetry Configuration
OPENTELEMETRY_ENABLED = os.environ.get('OPENTELEMETRY_ENABLED', 'True') == 'True'

# Comprehensive OpenTelemetry Settings
OTEL_SERVICE_NAME = os.environ.get('OTEL_SERVICE_NAME', 'notes-web-service')
OTEL_EXPORTER_OTLP_ENDPOINT = os.environ.get(
    'OTEL_EXPORTER_OTLP_ENDPOINT',
    'http://grafana-k8s-monitoring-alloy.grafana.svc.cluster.local:4317'
)

# Detailed OpenTelemetry Instrumentation Settings
OTEL_PYTHON_DJANGO_INSTRUMENT = True
OTEL_PYTHON_DJANGO_INSTRUMENT_DATABASES = True
OTEL_PYTHON_DJANGO_QUERY_LOGGING = True

# Database Configuration with Enhanced Tracing
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'django'),
        'USER': os.environ.get('DB_USER', 'django'),
        'PASSWORD': os.environ.get('DB_PASSWORD', '1234'),
        'HOST': os.environ.get('DB_HOST', 'postgresql'),
        'PORT': os.environ.get('DB_PORT', '5432'),
        # Enable query logging for tracing
        'OPTIONS': {
            'sslmode': 'disable',
            'sql_comments': True,
        }
    }
}

# Root URL configuration
ROOT_URLCONF = 'django_project.urls'

# WSGI Application
WSGI_APPLICATION = 'django_project.wsgi.application'

# Static and Media Files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'notes_app', 'static'),
]

# Templates Configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Authentication and Security
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Optional: Performance and Debugging Settings
if DEBUG:
    # Additional debugging for development
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
