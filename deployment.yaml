apiVersion: v1
kind: Service
metadata:
  name: postgresql
spec:
  selector:
    app: notes-app
  ports:
  - port: 5432
    targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: notes-app
spec:
  selector:
    app: notes-app
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notes-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notes-app
  template:
    metadata:
      labels:
        app: notes-app
    spec:
      containers:
      - name: postgresql
        image: dalareo/notes-db:latest
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: notes
        - name: POSTGRES_USER
          value: django
        - name: POSTGRES_PASSWORD
          value: "1234"
        - name: POSTGRES_MULTIPLE_DATABASES
          value: notes,django
        - name: OTEL_SERVICE_NAME
          value: notes-db-service
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://grafana-k8s-monitoring-alloy.grafana.svc.cluster.local:4317"
        volumeMounts:
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - django
          initialDelaySeconds: 15
          periodSeconds: 10

      - name: notes-app
        image: dalareo/notes-app:latest
        ports:
        - containerPort: 8000
        env:
        - name: DB_NAME
          value: django
        - name: DB_USER
          value: django
        - name: DB_PASSWORD
          value: "1234"
        - name: DB_HOST
          value: localhost
        - name: DB_PORT
          value: "5432"
        - name: DJANGO_SETTINGS_MODULE
          value: django_project.settings
        - name: ALLOWED_HOSTS
          value: "*"
        - name: DEBUG
          value: "True"
        - name: OTEL_SERVICE_NAME
          value: notes-web-service
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://grafana-k8s-monitoring-alloy.grafana.svc.cluster.local:4317"
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Wait for database to be ready
          sleep 20

          # Install dependencies
          pip install psycopg2

          # Run migrations for all apps
          python manage.py makemigrations
          python manage.py migrate

          # Create superuser if not exists
          python -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'adminpass') if not User.objects.filter(username='admin').exists() else None"

          # Start the server
          python manage.py runserver 0.0.0.0:8000
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10

      volumes:
      - name: initdb
        configMap:
          name: postgresql-init
          defaultMode: 0755

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
data:
  create-multiple-databases.sh: |
    #!/bin/bash
    set -e
    set -u

    function create_user_and_database() {
      local database=$1
      echo "Creating database '$database'"
      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" postgres <<-EOSQL
        SELECT 'CREATE DATABASE $database' 
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$database')\gexec
        GRANT ALL PRIVILEGES ON DATABASE $database TO $POSTGRES_USER;
    EOSQL
    }

    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
      echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
      for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
        create_user_and_database $db
      done
      echo "Multiple databases created"
    fi
